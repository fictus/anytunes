//using Java.Sql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//using static Android.Net.LocalSocketAddress;

namespace anytunes.Services
{
    public class EvitunesService
    {
        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by a tool.
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------



        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.ServiceModel.ServiceContractAttribute(Namespace = "https://evicore.net/", ConfigurationName = "IOSoap")]
        public interface IOSoap
        {

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/Ping", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> PingAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetSongProcessingDate", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> GetSongProcessingDateAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetSongProcessingDateTime", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> GetSongProcessingDateTimeAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/AuthenticateUser", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<AuthenticateResponseDataItem> AuthenticateUserAsync(string UserName, string Password);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/LogOut", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> LogOutAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetEvitunesSearch", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GetEvitunesSearchResponse> GetEvitunesSearchAsync(GetEvitunesSearchRequest request);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetArtistsOrSoundTrackSongsById", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<SongDataItem[]> GetArtistsOrSoundTrackSongsByIdAsync(string Token, int ArtistOrSounTrackId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetGenreList", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenreDataItem[]> GetGenreListAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/AdminDeleteSubAlbumAndSongs", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> AdminDeleteSubAlbumAndSongsAsync(string Token, int SubAlbumId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/InsertNewPlaylist", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<UserPlaylistDataItem[]> InsertNewPlaylistAsync(string Token, string PlaylistName);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetUserPlaylist", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<UserPlaylistDataItem[]> GetUserPlaylistAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/InsertSongIntoPlaylist", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> InsertSongIntoPlaylistAsync(string Token, int PlaylistId, string SongId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetUserPlaylistSongs", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<SongDataItem[]> GetUserPlaylistSongsAsync(string Token, int PlaylistId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/MakeShuffledPaylist", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<SongDataItem[]> MakeShuffledPaylistAsync(string Token);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/DeleteSongFromUserPlaylist", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> DeleteSongFromUserPlaylistAsync(string Token, int PlaylistId, string SongId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GetArtistsOrSoundTrackGenre", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<string> GetArtistsOrSoundTrackGenreAsync(string Token, string ArtistOrSounTrackName);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/GenerateURLToken", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<URLDataItem> GenerateURLTokenAsync(string Token, string SongId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/ServeBynarySong", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task ServeBynarySongAsync(string Token, string SongId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/ServeBynarySongByURLToken", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task ServeBynarySongByURLTokenAsync(string URLToken, string SongId);

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/UploadArtistOrSoundTrackAlbum", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> UploadArtistOrSoundTrackAlbumAsync();

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/UploadSongsToExistingAlbum", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> UploadSongsToExistingAlbumAsync();

            [System.ServiceModel.OperationContractAttribute(Action = "https://evicore.net/UpdateExistingMp3FileBySongId", ReplyAction = "*")]
            [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults = true)]
            System.Threading.Tasks.Task<GenericResponse> UpdateExistingMp3FileBySongIdAsync();
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class GenericResponse
        {

            private bool errorField;

            private string errorMsgField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public bool error
            {
                get
                {
                    return this.errorField;
                }
                set
                {
                    this.errorField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string errorMsg
            {
                get
                {
                    return this.errorMsgField;
                }
                set
                {
                    this.errorMsgField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class URLDataItem
        {

            private string uRLTokenField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public string URLToken
            {
                get
                {
                    return this.uRLTokenField;
                }
                set
                {
                    this.uRLTokenField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class UserPlaylistDataItem
        {

            private int idField;

            private string playlistNameField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public int Id
            {
                get
                {
                    return this.idField;
                }
                set
                {
                    this.idField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string PlaylistName
            {
                get
                {
                    return this.playlistNameField;
                }
                set
                {
                    this.playlistNameField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class GenreDataItem
        {

            private int idField;

            private string genreNameField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public int Id
            {
                get
                {
                    return this.idField;
                }
                set
                {
                    this.idField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string GenreName
            {
                get
                {
                    return this.genreNameField;
                }
                set
                {
                    this.genreNameField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class SongDataItem
        {

            private string songIdField;

            private string artistOrSoundTrackNameField;

            private string songNameField;

            private string artistNameField;

            private int songNumberField;

            private System.Nullable<int> subAlbumIdField;

            private int cDNumberField;

            private string notesField;

            private System.DateTime dateAddedField;

            private bool isSoundTrackField;

            private System.Nullable<int> playListIdField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public string SongId
            {
                get
                {
                    return this.songIdField;
                }
                set
                {
                    this.songIdField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string ArtistOrSoundTrackName
            {
                get
                {
                    return this.artistOrSoundTrackNameField;
                }
                set
                {
                    this.artistOrSoundTrackNameField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
            public string SongName
            {
                get
                {
                    return this.songNameField;
                }
                set
                {
                    this.songNameField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
            public string ArtistName
            {
                get
                {
                    return this.artistNameField;
                }
                set
                {
                    this.artistNameField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
            public int SongNumber
            {
                get
                {
                    return this.songNumberField;
                }
                set
                {
                    this.songNumberField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 5)]
            public System.Nullable<int> SubAlbumId
            {
                get
                {
                    return this.subAlbumIdField;
                }
                set
                {
                    this.subAlbumIdField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
            public int CDNumber
            {
                get
                {
                    return this.cDNumberField;
                }
                set
                {
                    this.cDNumberField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 7)]
            public string Notes
            {
                get
                {
                    return this.notesField;
                }
                set
                {
                    this.notesField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 8)]
            public System.DateTime DateAdded
            {
                get
                {
                    return this.dateAddedField;
                }
                set
                {
                    this.dateAddedField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 9)]
            public bool isSoundTrack
            {
                get
                {
                    return this.isSoundTrackField;
                }
                set
                {
                    this.isSoundTrackField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(IsNullable = true, Order = 10)]
            public System.Nullable<int> PlayListId
            {
                get
                {
                    return this.playListIdField;
                }
                set
                {
                    this.playListIdField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class ArtistOrSoundTrackDataItem
        {

            private int idField;

            private string artistOrSoundTrackNameField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public int Id
            {
                get
                {
                    return this.idField;
                }
                set
                {
                    this.idField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string ArtistOrSoundTrackName
            {
                get
                {
                    return this.artistOrSoundTrackNameField;
                }
                set
                {
                    this.artistOrSoundTrackNameField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class EvitunesSearchResponse
        {

            private bool isArtistField;

            private ArtistOrSoundTrackDataItem[] artistDataField;

            private SongDataItem[] songDataField;

            private int totalCountField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public bool isArtist
            {
                get
                {
                    return this.isArtistField;
                }
                set
                {
                    this.isArtistField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlArrayAttribute(Order = 1)]
            public ArtistOrSoundTrackDataItem[] ArtistData
            {
                get
                {
                    return this.artistDataField;
                }
                set
                {
                    this.artistDataField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlArrayAttribute(Order = 2)]
            public SongDataItem[] SongData
            {
                get
                {
                    return this.songDataField;
                }
                set
                {
                    this.songDataField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
            public int TotalCount
            {
                get
                {
                    return this.totalCountField;
                }
                set
                {
                    this.totalCountField = value;
                }
            }
        }

        /// <remarks/>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace = "https://evicore.net/")]
        public partial class AuthenticateResponseDataItem
        {

            private bool errorField;

            private string errorMsgField;

            private string tokenField;

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
            public bool error
            {
                get
                {
                    return this.errorField;
                }
                set
                {
                    this.errorField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
            public string errorMsg
            {
                get
                {
                    return this.errorMsgField;
                }
                set
                {
                    this.errorMsgField = value;
                }
            }

            /// <remarks/>
            [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
            public string token
            {
                get
                {
                    return this.tokenField;
                }
                set
                {
                    this.tokenField = value;
                }
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        [System.ServiceModel.MessageContractAttribute(WrapperName = "GetEvitunesSearch", WrapperNamespace = "https://evicore.net/", IsWrapped = true)]
        public partial class GetEvitunesSearchRequest
        {

            [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "https://evicore.net/", Order = 0)]
            public string Token;

            [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "https://evicore.net/", Order = 1)]
            [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
            public System.Nullable<int> GenreId;

            [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "https://evicore.net/", Order = 2)]
            public string ArtistOrSongName;

            [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "https://evicore.net/", Order = 3)]
            public string isArtist;

            public GetEvitunesSearchRequest()
            {
            }

            public GetEvitunesSearchRequest(string Token, System.Nullable<int> GenreId, string ArtistOrSongName, string isArtist)
            {
                this.Token = Token;
                this.GenreId = GenreId;
                this.ArtistOrSongName = ArtistOrSongName;
                this.isArtist = isArtist;
            }
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        [System.ServiceModel.MessageContractAttribute(WrapperName = "GetEvitunesSearchResponse", WrapperNamespace = "https://evicore.net/", IsWrapped = true)]
        public partial class GetEvitunesSearchResponse
        {

            [System.ServiceModel.MessageBodyMemberAttribute(Namespace = "https://evicore.net/", Order = 0)]
            public EvitunesSearchResponse GetEvitunesSearchResult;

            public GetEvitunesSearchResponse()
            {
            }

            public GetEvitunesSearchResponse(EvitunesSearchResponse GetEvitunesSearchResult)
            {
                this.GetEvitunesSearchResult = GetEvitunesSearchResult;
            }
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        public interface IOSoapChannel : IOSoap, System.ServiceModel.IClientChannel
        {
        }

        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
        public partial class OSoapClient : System.ServiceModel.ClientBase<IOSoap>, IOSoap
        {

            /// <summary>
            /// Implement this partial method to configure the service endpoint.
            /// </summary>
            /// <param name="serviceEndpoint">The endpoint to configure</param>
            /// <param name="clientCredentials">The client credentials</param>
            static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

            public OSoapClient(EndpointConfiguration endpointConfiguration) :
                    base(OSoapClient.GetBindingForEndpoint(endpointConfiguration), OSoapClient.GetEndpointAddress(endpointConfiguration))
            {
                this.Endpoint.Name = endpointConfiguration.ToString();
                ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
            }

            public OSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
                    base(OSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
            {
                this.Endpoint.Name = endpointConfiguration.ToString();
                ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
            }

            public OSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
                    base(OSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
            {
                this.Endpoint.Name = endpointConfiguration.ToString();
                ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
            }

            public OSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                    base(binding, remoteAddress)
            {
            }

            public System.Threading.Tasks.Task<GenericResponse> PingAsync(string Token)
            {
                return base.Channel.PingAsync(Token);
            }

            public System.Threading.Tasks.Task<GenericResponse> GetSongProcessingDateAsync(string Token)
            {
                return base.Channel.GetSongProcessingDateAsync(Token);
            }

            public System.Threading.Tasks.Task<GenericResponse> GetSongProcessingDateTimeAsync(string Token)
            {
                return base.Channel.GetSongProcessingDateTimeAsync(Token);
            }

            public System.Threading.Tasks.Task<AuthenticateResponseDataItem> AuthenticateUserAsync(string UserName, string Password)
            {
                return base.Channel.AuthenticateUserAsync(UserName, Password);
            }

            public System.Threading.Tasks.Task<GenericResponse> LogOutAsync(string Token)
            {
                return base.Channel.LogOutAsync(Token);
            }

            [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
            System.Threading.Tasks.Task<GetEvitunesSearchResponse> IOSoap.GetEvitunesSearchAsync(GetEvitunesSearchRequest request)
            {
                return base.Channel.GetEvitunesSearchAsync(request);
            }

            public System.Threading.Tasks.Task<GetEvitunesSearchResponse> GetEvitunesSearchAsync(string Token, System.Nullable<int> GenreId, string ArtistOrSongName, string isArtist)
            {
                GetEvitunesSearchRequest inValue = new GetEvitunesSearchRequest();
                inValue.Token = Token;
                inValue.GenreId = GenreId;
                inValue.ArtistOrSongName = ArtistOrSongName;
                inValue.isArtist = isArtist;
                return ((IOSoap)(this)).GetEvitunesSearchAsync(inValue);
            }

            public System.Threading.Tasks.Task<SongDataItem[]> GetArtistsOrSoundTrackSongsByIdAsync(string Token, int ArtistOrSounTrackId)
            {
                return base.Channel.GetArtistsOrSoundTrackSongsByIdAsync(Token, ArtistOrSounTrackId);
            }

            public System.Threading.Tasks.Task<GenreDataItem[]> GetGenreListAsync(string Token)
            {
                return base.Channel.GetGenreListAsync(Token);
            }

            public System.Threading.Tasks.Task<GenericResponse> AdminDeleteSubAlbumAndSongsAsync(string Token, int SubAlbumId)
            {
                return base.Channel.AdminDeleteSubAlbumAndSongsAsync(Token, SubAlbumId);
            }

            public System.Threading.Tasks.Task<UserPlaylistDataItem[]> InsertNewPlaylistAsync(string Token, string PlaylistName)
            {
                return base.Channel.InsertNewPlaylistAsync(Token, PlaylistName);
            }

            public System.Threading.Tasks.Task<UserPlaylistDataItem[]> GetUserPlaylistAsync(string Token)
            {
                return base.Channel.GetUserPlaylistAsync(Token);
            }

            public System.Threading.Tasks.Task<GenericResponse> InsertSongIntoPlaylistAsync(string Token, int PlaylistId, string SongId)
            {
                return base.Channel.InsertSongIntoPlaylistAsync(Token, PlaylistId, SongId);
            }

            public System.Threading.Tasks.Task<SongDataItem[]> GetUserPlaylistSongsAsync(string Token, int PlaylistId)
            {
                return base.Channel.GetUserPlaylistSongsAsync(Token, PlaylistId);
            }

            public System.Threading.Tasks.Task<SongDataItem[]> MakeShuffledPaylistAsync(string Token)
            {
                return base.Channel.MakeShuffledPaylistAsync(Token);
            }

            public System.Threading.Tasks.Task<GenericResponse> DeleteSongFromUserPlaylistAsync(string Token, int PlaylistId, string SongId)
            {
                return base.Channel.DeleteSongFromUserPlaylistAsync(Token, PlaylistId, SongId);
            }

            public System.Threading.Tasks.Task<string> GetArtistsOrSoundTrackGenreAsync(string Token, string ArtistOrSounTrackName)
            {
                return base.Channel.GetArtistsOrSoundTrackGenreAsync(Token, ArtistOrSounTrackName);
            }

            public System.Threading.Tasks.Task<URLDataItem> GenerateURLTokenAsync(string Token, string SongId)
            {
                return base.Channel.GenerateURLTokenAsync(Token, SongId);
            }

            public System.Threading.Tasks.Task ServeBynarySongAsync(string Token, string SongId)
            {
                return base.Channel.ServeBynarySongAsync(Token, SongId);
            }

            public System.Threading.Tasks.Task ServeBynarySongByURLTokenAsync(string URLToken, string SongId)
            {
                return base.Channel.ServeBynarySongByURLTokenAsync(URLToken, SongId);
            }

            public System.Threading.Tasks.Task<GenericResponse> UploadArtistOrSoundTrackAlbumAsync()
            {
                return base.Channel.UploadArtistOrSoundTrackAlbumAsync();
            }

            public System.Threading.Tasks.Task<GenericResponse> UploadSongsToExistingAlbumAsync()
            {
                return base.Channel.UploadSongsToExistingAlbumAsync();
            }

            public System.Threading.Tasks.Task<GenericResponse> UpdateExistingMp3FileBySongIdAsync()
            {
                return base.Channel.UpdateExistingMp3FileBySongIdAsync();
            }

            public virtual System.Threading.Tasks.Task OpenAsync()
            {
                return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
            }

            public virtual System.Threading.Tasks.Task CloseAsync()
            {
                return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
            }

            private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
            {
                if ((endpointConfiguration == EndpointConfiguration.IOSoap))
                {
                    System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                    result.MaxBufferSize = int.MaxValue;
                    result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                    result.MaxReceivedMessageSize = int.MaxValue;
                    result.AllowCookies = true;
                    result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                    return result;
                }
                if ((endpointConfiguration == EndpointConfiguration.IOSoap12))
                {
                    System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                    System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                    textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                    result.Elements.Add(textBindingElement);
                    System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                    httpsBindingElement.AllowCookies = true;
                    httpsBindingElement.MaxBufferSize = int.MaxValue;
                    httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                    result.Elements.Add(httpsBindingElement);
                    return result;
                }
                throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
            }

            private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
            {
                if ((endpointConfiguration == EndpointConfiguration.IOSoap))
                {
                    return new System.ServiceModel.EndpointAddress("https://evicore.net/evitunesService/IO.asmx");
                }
                if ((endpointConfiguration == EndpointConfiguration.IOSoap12))
                {
                    return new System.ServiceModel.EndpointAddress("https://evicore.net/evitunesService/IO.asmx");
                }
                throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
            }

            public enum EndpointConfiguration
            {

                IOSoap,

                IOSoap12,
            }
        }

    }
}
